# Generated by Django 3.1.7 on 2022-12-01 06:51

import datetime
import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import tinymce.models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='CityGuide',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=20)),
                ('image', models.FileField(upload_to='media/guide/city')),
                ('q_1_title', models.CharField(blank=True, default=' ', max_length=50)),
                ('q_1_desc', models.TextField(blank=True, default=' ')),
                ('q_1_image', models.FileField(blank=True, default='default.png', upload_to='media/guide/city/q1')),
                ('q_2_title', models.CharField(blank=True, max_length=50)),
                ('q_2_desc', models.TextField(blank=True)),
                ('q_2_image', models.FileField(blank=True, upload_to='media/guide/city/q2')),
                ('q_3_title', models.CharField(blank=True, max_length=50)),
                ('q_3_desc', models.TextField(blank=True)),
                ('q_3_image', models.FileField(blank=True, upload_to='media/guide/city/q3')),
                ('card_1_title', models.CharField(blank=True, max_length=50)),
                ('card_1_desc', models.TextField(blank=True)),
                ('card_1_image', models.FileField(blank=True, upload_to='media/guide/city/c1')),
                ('card_2_title', models.CharField(blank=True, max_length=50)),
                ('card_2_desc', models.TextField(blank=True)),
                ('card_2_image', models.FileField(blank=True, upload_to='media/guide/city/c2')),
                ('card_3_title', models.CharField(blank=True, max_length=50)),
                ('card_3_desc', models.TextField(blank=True)),
                ('card_3_image', models.FileField(blank=True, upload_to='media/guide/city/c3')),
            ],
        ),
        migrations.CreateModel(
            name='FeatureMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='FurnitureMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('furniture_counts', models.CharField(max_length=5)),
            ],
        ),
        migrations.CreateModel(
            name='Properties',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=30)),
                ('type', models.CharField(choices=[('1', 'studio'), ('2', 'apartment')], max_length=10)),
                ('price', models.IntegerField(default=0)),
                ('area', models.CharField(blank=True, default='', max_length=20, null=True)),
                ('adddress', models.CharField(max_length=50)),
                ('city', models.CharField(blank=True, default='', max_length=15, null=True)),
                ('postal_code', models.CharField(max_length=10)),
                ('lat', models.FloatField(blank=True)),
                ('lon', models.FloatField(blank=True)),
                ('desc', models.TextField()),
                ('content', tinymce.models.HTMLField()),
                ('image', models.FileField(upload_to='media')),
                ('year_built', models.CharField(max_length=10)),
                ('embedded_link_youtube', models.CharField(max_length=100)),
                ('pub_date', models.DateField(default=datetime.datetime(2022, 12, 1, 12, 21, 32, 508043))),
            ],
        ),
        migrations.CreateModel(
            name='StatusMaster',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('status', models.CharField(max_length=20)),
            ],
        ),
        migrations.CreateModel(
            name='PropertyStatusMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('property', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.properties')),
                ('status', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.statusmaster')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyImage',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('images', models.FileField(upload_to='media')),
                ('property', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.properties')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyFurnitureMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('furniture_type', models.CharField(choices=[('1', 'room'), ('2', 'bathrooms'), ('3', 'garage')], max_length=10)),
                ('furniture_counts', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.furnituremaster')),
                ('property', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.properties')),
            ],
        ),
        migrations.CreateModel(
            name='PropertyFeatureMapper',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('feature', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.featuremaster')),
                ('property', models.ForeignKey(default=None, on_delete=django.db.models.deletion.CASCADE, to='home.properties')),
            ],
        ),
        migrations.CreateModel(
            name='CustomUser',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True, verbose_name='email address')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
    ]
